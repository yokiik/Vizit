"""Flask –≤–µ–±-—Å–µ—Ä–≤–µ—Ä"""
from flask import Flask, render_template, request, jsonify, send_from_directory
from flask_cors import CORS
import threading
from typing import Dict

from service.task_service import TaskService
from service.automation_service import AutomationService
from repository.json_repository import JSONDataManager
from domain.task import Task
from domain.settings import Settings
from domain.log import LogEntry, create_user_action_log
from domain.references import ReferenceType


class WebServer:
    """Flask –≤–µ–±-—Å–µ—Ä–≤–µ—Ä"""
    
    def __init__(
        self,
        task_service: TaskService,
        automation_service: AutomationService,
        data_manager: JSONDataManager
    ):
        self.task_service = task_service
        self.automation_service = automation_service
        self.data_manager = data_manager
        
        # –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.app = Flask(__name__, 
                         template_folder='templates',
                         static_folder='static')
        CORS(self.app)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
        self._register_routes()
    
    def _register_routes(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã"""
        # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        self.app.route('/')(self.index)
        
        # API –∑–∞–¥–∞–Ω–∏–π
        self.app.route('/api/tasks', methods=['GET'])(self.get_tasks)
        self.app.route('/api/tasks/create', methods=['POST'])(self.create_task)
        self.app.route('/api/tasks/update', methods=['PUT'])(self.update_task)
        self.app.route('/api/tasks/delete', methods=['DELETE'])(self.delete_task)
        self.app.route('/api/tasks/reorder', methods=['POST'])(self.reorder_tasks)
        
        # API –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.app.route('/api/settings', methods=['GET', 'POST'])(self.handle_settings)
        
        # API —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
        self.app.route('/api/references', methods=['GET'])(self.get_references)
        self.app.route('/api/references/add', methods=['POST'])(self.add_reference)
        self.app.route('/api/references/delete', methods=['DELETE'])(self.delete_reference)
        
        # API –ª–æ–≥–æ–≤
        self.app.route('/api/logs', methods=['GET'])(self.get_logs)
        
        # API –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        self.app.route('/api/automation/start', methods=['POST'])(self.start_automation)
        self.app.route('/api/automation/stop', methods=['POST'])(self.stop_automation)
        
        # API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.app.route('/api/connection/test', methods=['POST'])(self.test_connection)
    
    def start(self, port: int = 8088):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä"""
        print(f"üöÄ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        print(f"üåê –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:{port}")
        print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        self.app.run(host='0.0.0.0', port=port, debug=False)
    
    # =================== –ú–∞—Ä—à—Ä—É—Ç—ã ===================
    
    def index(self):
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        return render_template('index.html')
    
    def get_tasks(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π"""
        try:
            tasks = self.task_service.get_all_tasks()
            return jsonify([task.to_dict() for task in tasks])
        except Exception as e:
            return jsonify({'error': str(e)}), 500
    
    def create_task(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ"""
        try:
            data = request.get_json()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            task = Task(
                type_task=data.get('type_task', ''),
                status=data.get('status', '–ù–æ–≤—ã–π'),
                date=data.get('date', ''),
                time_slot=data.get('time_slot', ''),
                num_auto=data.get('num_auto', ''),
                driver=data.get('driver', ''),
                place=data.get('place', ''),
                index_container=data.get('index_container', ''),
                number_container=data.get('number_container', ''),
                release_order=data.get('release_order', ''),
                contract_terminal=data.get('contract_terminal', '')
            )
            
            self.task_service.create_task(task)
            return jsonify({'id': task.id, 'success': True})
            
        except Exception as e:
            return jsonify({'error': str(e)}), 400
    
    def update_task(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ"""
        try:
            data = request.get_json()
            task = self.task_service.get_task(data['id'])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
            task.in_work = data.get('in_work', False)
            task.type_task = data.get('type_task', '')
            task.status = data.get('status', '')
            task.date = data.get('date', '')
            task.time_slot = data.get('time_slot', '')
            task.time_cancel = data.get('time_cancel', 30)
            task.count_try = data.get('count_try', 60)
            task.num_auto = data.get('num_auto', '')
            task.driver = data.get('driver', '')
            task.place = data.get('place', '')
            task.index_container = data.get('index_container', '')
            task.number_container = data.get('number_container', '')
            task.release_order = data.get('release_order', '')
            task.contract_terminal = data.get('contract_terminal', '')
            
            self.task_service.update_task(task)
            return jsonify({'success': True})
            
        except Exception as e:
            return jsonify({'error': str(e)}), 400
    
    def delete_task(self):
        """–£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ"""
        try:
            task_id = request.args.get('id')
            if not task_id:
                return jsonify({'error': 'ID –∑–∞–¥–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω'}), 400
            
            self.task_service.delete_task(task_id)
            return jsonify({'success': True})
            
        except Exception as e:
            return jsonify({'error': str(e)}), 400
    
    def reorder_tasks(self):
        """–ò–∑–º–µ–Ω—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –∑–∞–¥–∞–Ω–∏–π"""
        try:
            data = request.get_json()
            task_positions = data.get('task_positions', {})
            
            if not task_positions:
                return jsonify({'error': '–ü–æ–∑–∏—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏–π –Ω–µ —É–∫–∞–∑–∞–Ω—ã'}), 400
            
            self.task_service.reorder_tasks(task_positions)
            return jsonify({'success': True})
            
        except Exception as e:
            return jsonify({'error': str(e)}), 400
    
    def handle_settings(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if request.method == 'GET':
            try:
                settings = self.data_manager.get_settings().get()
                return jsonify(settings.to_dict())
            except Exception as e:
                return jsonify({'error': str(e)}), 500
        
        elif request.method == 'POST':
            try:
                data = request.get_json()
                settings = self.data_manager.get_settings().get()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                new_settings = Settings.from_dict(data)
                settings.update(new_settings)
                
                self.data_manager.get_settings().update(settings)
                return jsonify({'success': True})
                
            except Exception as e:
                return jsonify({'error': str(e)}), 400
    
    def get_references(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏"""
        try:
            references = self.data_manager.get_references().get()
            return jsonify(references.to_dict())
        except Exception as e:
            return jsonify({'error': str(e)}), 500
    
    def add_reference(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫"""
        try:
            data = request.get_json()
            ref_type_str = data.get('type', '')
            value = data.get('value', '')
            description = data.get('description', '')
            
            if not ref_type_str or not value:
                return jsonify({'error': '–ü–æ–ª—è type –∏ value –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400
            
            # –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤
            type_mapping = {
                'operations': ReferenceType.OPERATION,
                'statuses': ReferenceType.STATUS,
                'timeslots': ReferenceType.TIME_SLOT,
                'autos': ReferenceType.CAR_NUMBER,
                'drivers': ReferenceType.DRIVER,
                'contracts': ReferenceType.CONTRACT
            }
            
            ref_type = type_mapping.get(ref_type_str)
            if not ref_type:
                return jsonify({'error': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞'}), 400
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            references = self.data_manager.get_references().get()
            is_valid, error_msg = references.validate_new_item(ref_type, value, description)
            
            if not is_valid:
                # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–∞
                log_entry = create_user_action_log(
                    "–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –¥—É–±–ª–∏—Ä—É—é—â—É—é—Å—è –∑–∞–ø–∏—Å—å –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫",
                    f"–¢–∏–ø: {ref_type_str}, –ó–Ω–∞—á–µ–Ω–∏–µ: {value}, –û—à–∏–±–∫–∞: {error_msg}"
                )
                self.data_manager.get_logs().save(log_entry)
                return jsonify({'error': error_msg}), 409 if '—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' in error_msg else 400
            
            # –î–æ–±–∞–≤–ª—è–µ–º
            item = self.data_manager.get_references().add_item(ref_type, value, description)
            
            # –õ–æ–≥–∏—Ä—É–µ–º
            log_entry = create_user_action_log(
                "–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫",
                f"–¢–∏–ø: {ref_type_str}, –ó–Ω–∞—á–µ–Ω–∏–µ: {value}"
            )
            self.data_manager.get_logs().save(log_entry)
            
            return jsonify({'success': True, 'item': item.to_dict()})
            
        except Exception as e:
            return jsonify({'error': str(e)}), 400
    
    def delete_reference(self):
        """–£–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞"""
        try:
            data = request.get_json()
            ref_type_str = data.get('type', '')
            item_id = data.get('itemId', '')
            
            if not ref_type_str or not item_id:
                return jsonify({'error': '–ü–æ–ª—è type –∏ itemId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400
            
            # –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤
            type_mapping = {
                'operations': ReferenceType.OPERATION,
                'statuses': ReferenceType.STATUS,
                'timeslots': ReferenceType.TIME_SLOT,
                'autos': ReferenceType.CAR_NUMBER,
                'drivers': ReferenceType.DRIVER,
                'contracts': ReferenceType.CONTRACT
            }
            
            ref_type = type_mapping.get(ref_type_str)
            if not ref_type:
                return jsonify({'error': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞'}), 400
            
            # –£–¥–∞–ª—è–µ–º
            self.data_manager.get_references().remove_item(ref_type, item_id)
            
            # –õ–æ–≥–∏—Ä—É–µ–º
            log_entry = create_user_action_log(
                "–£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞",
                f"–¢–∏–ø: {ref_type_str}, ID: {item_id}"
            )
            self.data_manager.get_logs().save(log_entry)
            
            return jsonify({'success': True})
            
        except Exception as e:
            return jsonify({'error': str(e)}), 400
    
    def get_logs(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–∏"""
        try:
            logs = self.data_manager.get_logs().get_latest(100)
            return jsonify([log.to_dict() for log in logs])
        except Exception as e:
            return jsonify({'error': str(e)}), 500
    
    def start_automation(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é"""
        try:
            data = request.get_json()
            task_ids = data.get('taskIds', [])
            parallel = data.get('parallel', False)
            max_concurrency = data.get('maxConcurrency', 5)
            
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
            if 'taskId' in data:
                task_ids = [data['taskId']]
            
            if not task_ids:
                return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω—ã –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'}), 400
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º
            execution_mode = "–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è" if parallel else "–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è"
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫
            start_log = LogEntry(
                level='INFO',
                category='BROWSER_AUTOMATION',
                message=f"üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è {len(task_ids)} –∑–∞–¥–∞–Ω–∏–π ({execution_mode} –æ–±—Ä–∞–±–æ—Ç–∫–∞)"
            )
            self.data_manager.get_logs().save(start_log)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            def run_automation():
                try:
                    if parallel:
                        self.automation_service.execute_tasks_parallel(task_ids, max_concurrency)
                    else:
                        self.automation_service.execute_tasks_sequentially(task_ids)
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—Ö
                    success_log = LogEntry(
                        level='INFO',
                        category='BROWSER_AUTOMATION',
                        message=f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ({len(task_ids)} –∑–∞–¥–∞–Ω–∏–π, {execution_mode})"
                    )
                    self.data_manager.get_logs().save(success_log)
                    
                except Exception as e:
                    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                    error_log = LogEntry(
                        level='ERROR',
                        category='BROWSER_AUTOMATION',
                        message=f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {str(e)}"
                    )
                    self.data_manager.get_logs().save(error_log)
            
            thread = threading.Thread(target=run_automation, daemon=True)
            thread.start()
            
            return jsonify({'success': True})
            
        except Exception as e:
            return jsonify({'error': str(e)}), 400
    
    def stop_automation(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é"""
        try:
            self.automation_service.stop_execution()
            self.task_service.stop_task_execution()
            return jsonify({'success': True})
        except Exception as e:
            return jsonify({'error': str(e)}), 400
    
    def test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        try:
            data = request.get_json()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if not data.get('site_url'):
                return jsonify({'error': 'URL —Å–∞–π—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω'}), 400
            if not data.get('login'):
                return jsonify({'error': '–õ–æ–≥–∏–Ω –Ω–µ —É–∫–∞–∑–∞–Ω'}), 400
            if not data.get('password'):
                return jsonify({'error': '–ü–∞—Ä–æ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω'}), 400
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            settings = Settings.from_dict(data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            current_settings = self.data_manager.get_settings().get()
            current_settings.update(settings)
            self.data_manager.get_settings().update(current_settings)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            result = self.automation_service.test_connection()
            
            return jsonify(result.to_dict())
            
        except Exception as e:
            return jsonify({'error': str(e)}), 400


def create_web_server(
    task_service: TaskService,
    automation_service: AutomationService,
    data_manager: JSONDataManager
) -> WebServer:
    """–°–æ–∑–¥–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä"""
    return WebServer(task_service, automation_service, data_manager)

