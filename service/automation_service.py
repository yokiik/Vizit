"""–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞"""
import time
import threading
from typing import List, Optional
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor, as_completed

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.chrome.options import Options as ChromeOptions
from selenium.common.exceptions import TimeoutException, NoSuchElementException

from domain.task import Task, TaskType, TaskStatus
from domain.settings import Settings, ConnectionTestResult
from domain.log import LogEntry, LogLevel, LogCategory, create_error_log
from repository.interfaces import SettingsRepository, LogRepository
from .task_service import TaskService


class AutomationService:
    """–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(
        self,
        settings_repo: SettingsRepository,
        log_repo: LogRepository,
        task_service: TaskService
    ):
        self.settings_repo = settings_repo
        self.log_repo = log_repo
        self.task_service = task_service
        self.driver: Optional[webdriver.Chrome] = None
        self.is_running = False
        self.stop_flag = threading.Event()
        self.current_task: Optional[Task] = None
    
    # =================== –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ===================
    
    def test_connection(self) -> ConnectionTestResult:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–∞–π—Ç—É"""
        result = ConnectionTestResult(success=False, message="")
        self._log_info("üîç –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        
        start_time = datetime.now()
        
        try:
            settings = self.settings_repo.get()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if not settings.site_url:
                raise Exception("URL —Å–∞–π—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            if not settings.login:
                raise Exception("–õ–æ–≥–∏–Ω –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            if not settings.password:
                raise Exception("–ü–∞—Ä–æ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            
            self._log_info(f"üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: {settings.site_url}")
            self._log_info(f"üë§ –õ–æ–≥–∏–Ω: {settings.login}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
            self._init_browser(settings)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            self._log_info("üîê –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
            self._perform_login_test(settings)
            
            # –£—Å–ø–µ—Ö
            result.success = True
            result.message = "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
            settings.update_connection_status(True, result.message)
            self.settings_repo.update(settings)
            
            self._log_info("‚úÖ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            result.success = False
            result.message = f"–û—à–∏–±–∫–∞: {str(e)}"
            result.error = str(e)
            self._log_error("–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", e)
        
        finally:
            self._close_browser()
            duration = (datetime.now() - start_time).total_seconds() * 1000
            result.duration = int(duration)
        
        return result
    
    # =================== –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π ===================
    
    def execute_tasks_sequentially(self, task_ids: List[str]) -> None:
        """–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π"""
        self._log_info(f"üìã –ù–∞—á–∞–ª–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {len(task_ids)} –∑–∞–¥–∞–Ω–∏–π")
        self.is_running = True
        self.stop_flag.clear()
        
        success_count = 0
        error_count = 0
        
        for i, task_id in enumerate(task_ids):
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            if self.stop_flag.is_set():
                self._log_info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏")
                self.is_running = False
                raise Exception("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            
            self._log_info(f"üìù –ó–∞–¥–∞–Ω–∏–µ {i+1} –∏–∑ {len(task_ids)}: {task_id}")
            
            try:
                task = self.task_service.get_task(task_id)
                self.execute_task(task)
                self._log_task_info(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ {i+1} ({task.type_task}) –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ", "")
                success_count += 1
            except Exception as e:
                self._log_task_error(f"‚ùå –ó–∞–¥–∞–Ω–∏–µ {i+1} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–æ–π", e)
                error_count += 1
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–¥–∞–Ω–∏—è–º–∏
            if i < len(task_ids) - 1:
                time.sleep(1)
        
        self.is_running = False
        self._log_info(f"üìä –ó–∞–≤–µ—Ä—à–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π. –£—Å–ø–µ—à–Ω–æ: {success_count}, –û—à–∏–±–æ–∫: {error_count}")
        
        if error_count > 0:
            raise Exception(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏: —É—Å–ø–µ—à–Ω–æ {success_count}, –æ—à–∏–±–æ–∫ {error_count}")
    
    def execute_tasks_parallel(self, task_ids: List[str], max_concurrency: int = 5) -> None:
        """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π"""
        if max_concurrency <= 0:
            max_concurrency = 5
        
        self._log_info(f"üîÑ –ù–∞—á–∞–ª–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {len(task_ids)} –∑–∞–¥–∞–Ω–∏–π (–º–∞–∫—Å. –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ: {max_concurrency})")
        self.is_running = True
        self.stop_flag.clear()
        
        success_count = 0
        error_count = 0
        errors = []
        
        with ThreadPoolExecutor(max_workers=max_concurrency) as executor:
            # –°–æ–∑–¥–∞–µ–º futures
            future_to_task = {}
            for i, task_id in enumerate(task_ids):
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                if self.stop_flag.is_set():
                    self._log_info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏")
                    break
                
                future = executor.submit(self._execute_task_parallel, task_id, i+1)
                future_to_task[future] = task_id
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for future in as_completed(future_to_task):
                task_id = future_to_task[future]
                try:
                    future.result()
                    success_count += 1
                except Exception as e:
                    error_count += 1
                    errors.append(str(e))
        
        self.is_running = False
        self._log_info(f"üìä –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ. –£—Å–ø–µ—à–Ω–æ: {success_count}, –û—à–∏–±–æ–∫: {error_count}")
        
        if error_count > 0:
            raise Exception(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏: —É—Å–ø–µ—à–Ω–æ {success_count}, –æ—à–∏–±–æ–∫ {error_count}. –û—à–∏–±–∫–∏: {'; '.join(errors)}")
    
    def _execute_task_parallel(self, task_id: str, task_num: int):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
        self._log_info(f"üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞–Ω–∏—è {task_num}: {task_id}")
        
        try:
            task = self.task_service.get_task(task_id)
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            parallel_service = self._create_parallel_instance()
            parallel_service.execute_task(task)
            
            self._log_task_info(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ {task_num} ({task.type_task}) –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ", "")
        except Exception as e:
            self._log_task_error(f"‚ùå –ó–∞–¥–∞–Ω–∏–µ {task_num} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–æ–π", e)
            raise Exception(f"–ó–∞–¥–∞–Ω–∏–µ {task_id}: {str(e)}")
    
    def _create_parallel_instance(self) -> 'AutomationService':
        """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        return AutomationService(
            self.settings_repo,
            self.log_repo,
            self.task_service
        )
    
    def execute_task(self, task: Task) -> None:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        if self.stop_flag.is_set():
            self._log_info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è")
            raise Exception("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
        self.current_task = task
        settings = self.settings_repo.get()
        
        # –≠—Ç–∞–ø 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
        self._log_task_info("üåê –≠—Ç–∞–ø 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞", "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Selenium WebDriver...")
        self._init_browser(settings)
        self._log_task_info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤", "Selenium WebDriver —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è
        self.task_service.update_task_status(task.id, TaskStatus.IN_WORK)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self._log_task_info(
            "üéØ –ù–∞—á–∞—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è",
            f"–¢–∏–ø: {task.type_task}, –î–∞—Ç–∞: {task.date}, –°–ª–æ—Ç: {task.time_slot}, –ê–≤—Ç–æ: {task.num_auto}, –í–æ–¥–∏—Ç–µ–ª—å: {task.driver}"
        )
        
        try:
            # –≠—Ç–∞–ø 2: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            self._log_task_info("üîê –≠—Ç–∞–ø 2: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç–µ", "–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç –∏ –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É...")
            self._perform_login_test(settings)
            
            # –≠—Ç–∞–ø 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
            self._log_task_info("‚ö° –≠—Ç–∞–ø 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è", f"–¢–∏–ø –∑–∞–¥–∞–Ω–∏—è: {task.type_task}")
            
            if task.type_task == TaskType.EXPORT:
                self._execute_export_task(task, settings)
            elif task.type_task == TaskType.IMPORT:
                self._execute_import_task(task, settings)
            else:
                raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è: {task.type_task}")
            
            # –≠—Ç–∞–ø 4: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            self._log_task_info("üèÅ –≠—Ç–∞–ø 4: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
            self.task_service.update_task_status(task.id, TaskStatus.COMPLETED)
            self._log_task_info("üéâ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!", f"ID: {task.id}, –¢–∏–ø: {task.type_task}")
            
        except Exception as e:
            self._log_task_error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è", e)
            self.task_service.update_task_status(task.id, TaskStatus.SKIPPED)
            raise
        
        finally:
            self._close_browser()
    
    def stop_execution(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"""
        self.stop_flag.set()
        self.is_running = False
        self._log_info("‚è∏Ô∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏")
    
    # =================== –ë—Ä–∞—É–∑–µ—Ä ===================
    
    def _init_browser(self, settings: Settings):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±—Ä–∞—É–∑–µ—Ä"""
        try:
            chrome_options = ChromeOptions()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Chrome
            if settings.use_headless:
                chrome_options.add_argument('--headless')
            
            chrome_options.add_argument(f'--window-size={settings.browser_width},{settings.browser_height}')
            chrome_options.add_argument('--disable-blink-features=AutomationControlled')
            chrome_options.add_argument('--no-sandbox')
            chrome_options.add_argument('--disable-dev-shm-usage')
            chrome_options.add_experimental_option('excludeSwitches', ['enable-automation'])
            chrome_options.add_experimental_option('useAutomationExtension', False)
            
            # –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
            if settings.browser_path:
                service = ChromeService(executable_path=settings.browser_path)
                self.driver = webdriver.Chrome(service=service, options=chrome_options)
            else:
                self.driver = webdriver.Chrome(options=chrome_options)
            
            self._log_info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            self._log_error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞", e)
            raise
    
    def _close_browser(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä"""
        if self.driver:
            try:
                self.driver.quit()
                self.driver = None
                self._log_info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                self._log_error("–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞", e)
    
    def _wait_for_element(self, by: By, selector: str, timeout: int = 10):
        """–û–∂–∏–¥–∞–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞"""
        try:
            element = WebDriverWait(self.driver, timeout).until(
                EC.presence_of_element_located((by, selector))
            )
            return element
        except TimeoutException:
            raise Exception(f"–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∑–∞ {timeout}—Å: {selector}")
    
    # =================== –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ===================
    
    def _perform_login_test(self, settings: Settings):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –Ω–∞ —Å–∞–π—Ç–µ"""
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç
            self.driver.get(settings.site_url)
            time.sleep(3)
            
            # –ü–æ–∏—Å–∫ —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            self._log_info("üîç –ü–æ–∏—Å–∫ —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –ª–æ–≥–∏–Ω–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
            login_field = None
            login_selectors = [
                (By.ID, "username"),
                (By.ID, "login"),
                (By.ID, "user"),
                (By.ID, "email"),
                (By.NAME, "username"),
                (By.NAME, "login"),
                (By.NAME, "user"),
                (By.NAME, "email"),
                (By.CSS_SELECTOR, "input[type='text']"),
                (By.CSS_SELECTOR, "input[type='email']"),
                (By.CSS_SELECTOR, ".username"),
                (By.CSS_SELECTOR, ".login"),
                (By.CSS_SELECTOR, ".form-control"),
            ]
            
            for by, selector in login_selectors:
                try:
                    login_field = WebDriverWait(self.driver, 2).until(
                        EC.presence_of_element_located((by, selector))
                    )
                    self._log_info(f"‚úÖ –ü–æ–ª–µ –ª–æ–≥–∏–Ω–∞ –Ω–∞–π–¥–µ–Ω–æ: {by} = '{selector}'")
                    break
                except:
                    continue
            
            if not login_field:
                raise Exception("–ü–æ–ª–µ –ª–æ–≥–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏–Ω
            login_field.clear()
            login_field.send_keys(settings.login)
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è
            password_field = None
            password_selectors = [
                (By.ID, "password"),
                (By.ID, "pass"),
                (By.NAME, "password"),
                (By.NAME, "pass"),
                (By.CSS_SELECTOR, "input[type='password']"),
                (By.CSS_SELECTOR, ".password"),
                (By.CSS_SELECTOR, ".form-control[type='password']"),
            ]
            
            for by, selector in password_selectors:
                try:
                    password_field = WebDriverWait(self.driver, 2).until(
                        EC.presence_of_element_located((by, selector))
                    )
                    self._log_info(f"‚úÖ –ü–æ–ª–µ –ø–∞—Ä–æ–ª—è –Ω–∞–π–¥–µ–Ω–æ: {by} = '{selector}'")
                    break
                except:
                    continue
            
            if not password_field:
                raise Exception("–ü–æ–ª–µ –ø–∞—Ä–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–æ–ª—å
            password_field.clear()
            password_field.send_keys(settings.password)
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
            login_button = None
            button_selectors = [
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                (By.CSS_SELECTOR, "button[type='submit']"),
                (By.CSS_SELECTOR, "input[type='submit']"),
                (By.CSS_SELECTOR, "button"),
                (By.CSS_SELECTOR, "input[type='button']"),
                
                # –ü–æ –∫–ª–∞—Å—Å–∞–º
                (By.CSS_SELECTOR, ".btn"),
                (By.CSS_SELECTOR, ".submit"),
                (By.CSS_SELECTOR, ".login-btn"),
                (By.CSS_SELECTOR, ".btn-primary"),
                (By.CSS_SELECTOR, ".btn-success"),
                (By.CSS_SELECTOR, ".button"),
                (By.CSS_SELECTOR, ".form-submit"),
                
                # –ü–æ ID
                (By.ID, "submit"),
                (By.ID, "login-btn"),
                (By.ID, "login-button"),
                (By.ID, "submit-btn"),
                (By.ID, "enter"),
                
                # –ü–æ —Ç–µ–∫—Å—Ç—É (—Ä—É—Å—Å–∫–∏–π)
                (By.XPATH, "//button[contains(text(), '–í–æ–π—Ç–∏')]"),
                (By.XPATH, "//button[contains(text(), '–í—Ö–æ–¥')]"),
                (By.XPATH, "//button[contains(text(), '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')]"),
                (By.XPATH, "//button[contains(text(), '–û—Ç–ø—Ä–∞–≤–∏—Ç—å')]"),
                (By.XPATH, "//input[@value='–í–æ–π—Ç–∏']"),
                (By.XPATH, "//input[@value='–í—Ö–æ–¥']"),
                (By.XPATH, "//input[@value='–û—Ç–ø—Ä–∞–≤–∏—Ç—å']"),
                
                # –ü–æ —Ç–µ–∫—Å—Ç—É (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
                (By.XPATH, "//button[contains(text(), 'Login')]"),
                (By.XPATH, "//button[contains(text(), 'Sign in')]"),
                (By.XPATH, "//button[contains(text(), 'Submit')]"),
                (By.XPATH, "//input[@value='Login']"),
                (By.XPATH, "//input[@value='Sign in']"),
                (By.XPATH, "//input[@value='Submit']"),
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                (By.CSS_SELECTOR, "[onclick*='login']"),
                (By.CSS_SELECTOR, "[onclick*='submit']"),
                (By.CSS_SELECTOR, "form button"),
                (By.CSS_SELECTOR, "form input[type='submit']"),
                (By.CSS_SELECTOR, "form input[type='button']"),
            ]
            
            for by, selector in button_selectors:
                try:
                    login_button = WebDriverWait(self.driver, 2).until(
                        EC.element_to_be_clickable((by, selector))
                    )
                    self._log_info(f"‚úÖ –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–∞–π–¥–µ–Ω–∞: {by} = '{selector}'")
                    break
                except:
                    continue
            
            if not login_button:
                # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É —á–µ—Ä–µ–∑ Enter
                self._log_info("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ Enter...")
                from selenium.webdriver.common.keys import Keys
                password_field.send_keys(Keys.RETURN)
                time.sleep(3)
            else:
                # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
                login_button.click()
                time.sleep(3)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            time.sleep(2)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–æ–≥–∏–Ω–∞ (–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ)
            current_url = self.driver.current_url
            page_source = self.driver.page_source.lower()
            
            # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–∞ —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if "login" in current_url.lower() or "–æ—à–∏–±–∫–∞" in page_source or "error" in page_source:
                self._log_info(f"‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ, –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. URL: {current_url}")
                # –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            else:
                self._log_info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. URL: {current_url}")
            
        except Exception as e:
            self._log_error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", e)
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è: {str(e)}")
    
    # =================== –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á ===================
    
    def _execute_export_task(self, task: Task, settings: Settings):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –≤—ã–≤–æ–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        self._log_task_info("üì§ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞", f"–î–∞—Ç–∞: {task.date}, –°–ª–æ—Ç: {task.time_slot}")
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
        # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ ~2000 —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞
        
        self._log_task_info("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω", "–ë–∞–∑–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    
    def _execute_import_task(self, task: Task, settings: Settings):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –≤–≤–æ–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        self._log_task_info("üì• –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞", f"–î–∞—Ç–∞: {task.date}, –°–ª–æ—Ç: {task.time_slot}")
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
        
        self._log_task_info("‚úÖ –ò–º–ø–æ—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω", "–ë–∞–∑–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    
    # =================== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===================
    
    def _log_info(self, message: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        entry = LogEntry(
            level=LogLevel.INFO,
            category=LogCategory.BROWSER_AUTOMATION,
            message=message
        )
        self.log_repo.save(entry)
    
    def _log_task_info(self, message: str, details: str = ""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏"""
        task_id = self.current_task.id if self.current_task else ""
        entry = LogEntry(
            level=LogLevel.INFO,
            category=LogCategory.TASK_EXECUTION,
            message=message,
            details=details,
            task_id=task_id
        )
        self.log_repo.save(entry)
    
    def _log_task_error(self, message: str, error: Exception):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –∑–∞–¥–∞–Ω–∏—è"""
        task_id = self.current_task.id if self.current_task else ""
        entry = LogEntry(
            level=LogLevel.ERROR,
            category=LogCategory.TASK_EXECUTION,
            message=message,
            error=str(error),
            task_id=task_id
        )
        self.log_repo.save(entry)
    
    def _log_error(self, message: str, error: Exception):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É"""
        entry = create_error_log(LogCategory.BROWSER_AUTOMATION, message, error)
        self.log_repo.save(entry)

